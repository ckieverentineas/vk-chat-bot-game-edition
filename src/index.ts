import { VK, Keyboard, IMessageContextSendOptions, ContextDefaultState, MessageContext, VKAppPayloadContext, KeyboardBuilder } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import { randomInt } from 'crypto';
import { timeStamp } from 'console';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { send } from 'process';
import * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
import { env } from 'process';
import prisma from './engine/events/module/prisma_client';
import { Battle_Init, Main_Menu_Init, Portal_Park, Portal_Shop, Portal_Underground, User_Add_Attack, User_Add_Health, User_Add_Mana, User_Attack, User_Info, User_Nickname, User_Nickname_Select } from './engine/events/contoller';
import { User } from '@prisma/client';
dotenv.config()

export const token: string = String(process.env.token)
export const root: number = Number(process.env.root) //root user
export const chat_id: number = Number(process.env.chat_id) //chat for logs
export const group_id: number = Number(process.env.group_id)//clear chat group
export const timer_text = { answerTimeLimit: 300_000 } // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const answerTimeLimit = 300_000 // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export const vk = new VK({ token: token, pollingGroupId: group_id, apiLimit: 1 });
//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();

/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)

let blocker: Array<1> = []
//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context: any, next: any) => {
	if (context.peerType == 'chat') { 
		try { 
			await vk.api.messages.delete({'peer_id': context.peerId, 'delete_for_all': 1, 'cmids': context.conversationMessageId, 'group_id': group_id})
			console.log(`User ${context.senderId} sent message and deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚úÖüö´ @id${context.senderId} ${context.text}`})  
		} catch (error) { 
			console.log(`User ${context.senderId} sent message and can't deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚õîüö´ @id${context.senderId} ${context.text}`}) 
		}  
		return
	}
	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
	const user_check = await prisma.user.findFirst({ where: { idvk: context.senderId } })
	//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	if (!user_check) {
		//—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(`‚åõ –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞? –û—Ç–∫—Ä—ã–≤ –≥–ª–∞–∑–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞üëÄ', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
				.textButton({ label: 'üë£', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime(),
				answerTimeLimit
			}
		);
		if (answer.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (!/–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–∑–∞üëÄ/i.test(answer.text|| '{}')) {
			await context.send('‚åõ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–∞—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ!');
			return;
		}
		const user_creation: User = await prisma.user.create({data: {idvk: context.senderId}})
		//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const visit = await context.question(`‚åõ –í—ã —Å–º–æ—Ç—Ä–µ–ª–∏ —Ç–µ–ª–∏–∫, –∫–∞–∫ –≤–¥—Ä—É–≥ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º —Å—Ç–∞–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ –ø–æ–≤—Å—é–¥—É —Å—Ç–∞–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ—Ä—Ç–∞–ª—ã, —á—Ç–æ –æ–Ω–∏ –Ω–∞–º –ø—Ä–∏–Ω–µ—Å—É—Ç, –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –Ω–æ –Ω–∞—Ä–æ–¥ —É–∂–µ –ø–∞—á–∫–∞–º–∏ –≤ –Ω–∏—Ö –ø–æ–ø–µ—Ä, –∞ –≤—ã —á—Ç–æ?`,
			{ 	
				keyboard: Keyboard.builder()
				.callbackButton({ label: '–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É', payload: { command: 'system_call' }, color: 'positive' }).oneTime().inline(),
				answerTimeLimit
			}
		);
		if (visit.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
	} else {
		const visit = await context.send(`‚åõ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–∞—è, –∏–¥—Ç–∏ —Ñ–∞—Ä–º–∏—Ç—å?`,
			{ 	
				keyboard: Keyboard.builder()
				.callbackButton({ label: '–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É', payload: { command: 'system_call' }, color: 'positive' }).oneTime().inline(),
				answerTimeLimit
			}
		);
	}
	return next();
})
vk.updates.on('message_event', async (context: any, next: any) => { 
	const config: any = {
		"system_call": Main_Menu_Init,
		"portal_shop": Portal_Shop,
		"portal_underground": Portal_Underground,
		"portal_park": Portal_Park,
		"user_info": User_Info,
		"user_add_attack": User_Add_Attack,
		"user_add_health": User_Add_Health,
		"user_add_mana": User_Add_Mana,
		"user_nickname": User_Nickname,
		"user_nickname_select": User_Nickname_Select,
		"battle_init": Battle_Init,
		"user_attack": User_Attack
	}
	try {
		await config[context.eventPayload.command](context)
	} catch (e) {
		console.log(`–û—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è ${e}`)
	}
	return await next();
})

vk.updates.start().then(() => {
	console.log('Servers game edition ready for services clients!')
}).catch(console.error);

import { PrismaClient } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";

const prisma = new PrismaClient()

export function InitGameRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/init/, async (context: any) => {
		const location = ["–ü–æ—Ä—Ç–∞–ª", "–ü–∞—Ä–∫", "–ú–∞–≥–∞–∑–∏–Ω", "–ú–µ—Ç—Ä–æ"]
		for (const i in location) {
			const location_create = await prisma.location.upsert({ create: { name: location[i] }, update: { name: location[i] }, where: { name: location[i] } })
			console.log(`–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: ${location_create.name}`)
		}	
		const region: any = [
			{
				region: [
					{ uid: 0, uid_dead: 0, road: [{ uid: 1 }, { uid: 7 }, { uid: 13 }], label: `${location[0]}`, name: "–ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç–∞–ª—ã", mob_min: 0, mob_max: 0, boss: 0 },
				], 
				target: location[0] 
			},
			{
				region: [
					{ uid: 1, uid_dead: 0, road: [{ uid: 2 }, { uid: 3 }], label: `${location[1]}`, name: "–ü–∞–º—è—Ç–Ω–∏–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º", mob_min: 1, mob_max: 1, boss: 0 },
					{ uid: 2, uid_dead: 0, road: [{ uid: 4 }, { uid: 5 }], label: "–ù–∞–ª–µ–≤–æ", name: "–¢—É—Ä–Ω–∏–∫–∏", mob_min: 1, mob_max: 2, boss: 0 },
					{ uid: 3, uid_dead: 0, road: [{ uid: 4 }, { uid: 5 }], label: "–ù–∞–ø—Ä–∞–≤–æ", name: "–ö—Ä—É–≥ –æ–±–æ–∑—Ä–µ–Ω–∏—è", mob_min: 2, mob_max: 2, boss: 0 },
					{ uid: 4, uid_dead: 0, road: [{ uid: 6 }], label: "–ù–∞–ª–µ–≤–æ", name: "–õ–µ–≤–æ–µ –∫—Ä—ã–ª–æ", mob_min: 2, mob_max: 3, boss: 0 },
					{ uid: 5, uid_dead: 0, road: [{ uid: 6 }], label: "–ù–∞–ø—Ä–∞–≤–æ", name: "–ü—Ä–∞–≤–æ–µ –∫—Ä—ã–ª–æ", mob_min: 3, mob_max: 3, boss: 0 },
					{ uid: 6, uid_dead: 0, road: [{ uid: 0 }], label: "–í–æ–π—Ç–∏", name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ö–æ–ª–ª", mob_min: 1, mob_max: 2, boss: 1 },
				], 
				target: location[1] 
			},
			{
				region: [
					{ uid: 7, uid_dead: 0, road: [{ uid: 8 }, { uid: 9 }], label: `${location[2]}`, name: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–¥–µ–ª", mob_min: 1, mob_max: 1, boss: 0 },
					{ uid: 8, uid_dead: 0, road: [{ uid: 10 }, { uid: 11 }], label: "–í–Ω–∏–∑", name: "–ü–æ–¥–≤–∞–ª", mob_min: 1, mob_max: 2, boss: 0 },
					{ uid: 9, uid_dead: 0, road: [{ uid: 10 }, { uid: 11 }], label: "–í–≤–µ—Ä—Ö", name: "–õ–µ—Å—Ç–Ω–∏—Ü–∞ –Ω–∞ –∫—Ä—ã—à—É", mob_min: 2, mob_max: 2, boss: 0 },
					{ uid: 10, uid_dead: 0, road: [{ uid: 12 }], label: "–í–≤–µ—Ä—Ö", name: "–î—ã—Ä–∞ –≤ –ø–æ—Ç–æ–ª–∫–µ", mob_min: 2, mob_max: 3, boss: 0 },
					{ uid: 11, uid_dead: 0, road: [{ uid: 12 }], label: "–í–Ω–∏–∑", name: "–ü–æ–∂–∞—Ä–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞", mob_min: 3, mob_max: 3, boss: 0 },
					{ uid: 12, uid_dead: 0, road: [{ uid: 0 }], label: "–í–ø–µ—Ä–µ–¥", name: "–ó–∞–¥–Ω–∏–π –¥–≤–æ—Ä", mob_min: 1, mob_max: 2, boss: 1 },
				], 
				target: location[2] 
			},
			{
				region: [
					{ uid: 13, uid_dead: 0, road: [{ uid: 14 }, { uid: 15 }], label: `${location[3]}`, name: "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ", mob_min: 1, mob_max: 1, boss: 0 },
					{ uid: 14, uid_dead: 0, road: [{ uid: 16 }, { uid: 17 }], label: "–í–ª–µ–≤–æ", name: "–ü—Ä–æ—Ö–æ–¥ —Å —Ä–∞–∑–±–∏—Ç—ã–º —ç–ª–µ–∫—Ç—Ä–æ–ø–æ–µ–∑–¥–æ–º", mob_min: 1, mob_max: 2, boss: 0 },
					{ uid: 15, uid_dead: 0, road: [{ uid: 16 }, { uid: 17 }], label: "–í–ø—Ä–∞–≤–æ", name: "–ó–∞–≤–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ö–æ–¥", mob_min: 2, mob_max: 2, boss: 0 },
					{ uid: 16, uid_dead: 0, road: [{ uid: 18 }], label: "–í–ª–µ–≤–æ", name: "–ü—Ä–æ–≤–∞–ª –ø–æ–¥ —ç–ª–µ–∫—Ç—Ä–æ–ø–æ–µ–∑–¥–æ–º", mob_min: 2, mob_max: 3, boss: 0 },
					{ uid: 17, uid_dead: 0, road: [{ uid: 18 }], label: "–í–ø—Ä–∞–≤–æ", name: "–©–µ–ª—å –≤ –ø–æ–ª—É", mob_min: 3, mob_max: 3, boss: 0 },
					{ uid: 18, uid_dead: 0, road: [{ uid: 0 }], label: "–í–ø–µ—Ä–µ–¥", name: "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–¥ –º–µ—Ç—Ä–æ", mob_min: 1, mob_max: 2, boss: 1 },
				], 
				target: location[3] 
			}
		]
		for (const i in region) {
			const id_location: any = await prisma.location.findFirst({ where: { name: region[i].target }, select: { id: true } })
			console.log("üöÄ ~ file: init.ts:59 ~ hearManager.hear ~ id_location:", id_location)
			for (const j in region[i].region) {
				const reg = region[i].region[j]
				const id_region: any = await prisma.region.findFirst({ where: { id_location: id_location.id,  uid: reg.uid }, select: { id: true } })
				if (!id_region) {
					const region_create: any = await prisma.region.create({ data: { id_location: id_location.id, uid_dead: reg.uid_dead, uid: reg.uid, road: JSON.stringify(reg.road), label: reg.label, name: reg.name, mob_min: reg.mob_min, mob_max: reg.mob_max, boss: reg.boss } })
					console.log(`–û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω: ${region_create.name}`)
				}
			}
		}
		const classify = ["–∏–≥—Ä–æ–∫", "–º–æ–±", "–±–æ—Å—Å"]
		for (const i in classify) {
			const classify_create = await prisma.classify.upsert({ create: { name: classify[i] }, update: { name: classify[i] }, where: { name: classify[i] } })
			console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–ø –º–æ–±–∞: ${classify_create.name}`)
		}	
		const creature: any = [
			{
				mob: [
					{ name: "–°–ª–∏–∑—å", team: 'enemy', xp: 1, atk: 1, health: 4, health_max: 4, mana: 0, skill: { active: ['–ê—Ç–∞–∫–∞'], passive: [], death: [] }, target_classify: classify[1] },
					{ name: "–°–ª–∏–∑–µ–Ω—å –ë–æ—Å—Å", team: 'enemy', xp: 3, atk: 2, health: 8, health_max: 8, mana: 2, skill: { active: ['–ê—Ç–∞–∫–∞'], passive: [], death: ['–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—ã—Ö —Å–ª–∏–∑–Ω–µ–π'] }, target_classify: classify[2] }
				],
				target: location[1] 
			}, 
			{
				mob: [
					{ name: "–ü—á–µ–ª–∞", team: 'enemy', xp: 1, atk: 2, health: 2, health_max: 2, mana: 0, skill: { active: ['–ê—Ç–∞–∫–∞'], passive: [], death: [] }, target_classify: classify[1] },
					{ name: "–ü—á–µ–ª–∞ –ë–æ—Å—Å", team: 'enemy', xp: 3, atk: 3, health: 6, health_max: 6, mana: 2, skill: { active: ['–ê—Ç–∞–∫–∞', '–ú–µ–¥–æ–≤–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ'], passive: [], death: [] }, target_classify: classify[2] },
				],
				target: location[2]
			}, 
			{
				mob: [
					{ name: "–ú—ã—à—å –ß–µ—Ä–Ω–∞—è", team: 'enemy', xp: 1, atk: 2, health: 2, health_max: 2, mana: 0, skill: { active: ['–ê—Ç–∞–∫–∞'], passive: [], death: [] }, target_classify: classify[1] },
					{ name: "–ú—ã—à—å –°–µ—Ä–∞—è", team: 'enemy', xp: 3, atk: 1, health: 4, health_max: 4, mana: 0, skill: { active: ['–ê—Ç–∞–∫–∞'], passive: [], death: [] }, target_classify: classify[1] }
				],
				target: location[3]
			}
		]
		for (const i in creature) {
			const id_location: any = await prisma.location.findFirst({ where: { name: creature[i].target }, select: { id: true } })
			for (const j in creature[i].mob) {
				const reg: any = creature[i].mob[j]
				const id_classify: any = await prisma.classify.findFirst({ where: { name: reg.target_classify }, select: { id: true } })
				const id_region: any = await prisma.mob.findFirst({ where: { id_location: id_location?.id,  name: reg.name }, select: { id: true } })
				if (!id_region) {
					const creature_create: any = await prisma.mob.create({ data: { id_location: id_location.id, id_classify: id_classify.id, xp: reg.xp, name: reg.name, atk: reg.atk, health: reg.health, health_max: reg.health_max, mana: reg.mana, skill: JSON.stringify(reg.skill) } })
					console.log(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–æ–±: ${creature_create.name}`)
				} else {
					const creature_create: any = await prisma.mob.update({ where: { name: reg.name }, data: { id_location: id_location.id, id_classify: id_classify.id, xp: reg.xp, name: reg.name, atk: reg.atk, health: reg.health, health_max: reg.health_max, mana: reg.mana, skill: JSON.stringify(reg.skill) } })
					console.log(`–û–±–Ω–æ–≤–ª–µ–Ω –º–æ–±: ${creature_create.name}`)
				}
			}
		}
		console.log(`Init map completed`)

		context.send('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞ —É—Å–ø–µ—à–Ω–æ.')
	})
}
import { KeyboardBuilder } from "vk-io"
import prisma from "./module/prisma_client"
import { root, vk } from "../.."
import { User } from "@prisma/client";
import { randomInt } from "crypto";


function Sleep(ms: number) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

export async function Main_Menu_Init(context: any) {
    //const attached = await Image_Random(context, "bank")
    //const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í–æ–π—Ç–∏ –≤ –ø–æ—Ä—Ç–∞–ª:`, keyboard: await Main_Menu(context)/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –ü–æ—Ä—Ç–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏"
        })
    })
}
export async function Exit(context: any) {
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `üí° –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –≥–æ—Å–¥—É–º—É! –í–∞—Å —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç, –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞`})
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        })
    })
}
export async function Main_Menu(context: any) {
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–ú–∞–≥–∞–∑–∏–Ω', payload: { command: 'portal_shop', location: '–ú–∞–≥–∞–∑–∏–Ω' }, color: 'secondary' })
    .callbackButton({ label: '–ú–µ—Ç—Ä–æ', payload: { command: 'portal_underground', location: '–ú–µ—Ç—Ä–æ' }, color: 'secondary' }).row()
    .callbackButton({ label: '–ü–∞—Ä–∫', payload: { command: 'portal_park', location: '–ü–∞—Ä–∫' }, color: 'secondary' }).inline().oneTime()
    return keyboard
}

export async function Portal_Shop(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { location: context.eventPayload.location }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ö–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å, –¥–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –≤–µ–¥—ë—Ç –≤ –≥–Ω–µ–∑–¥–æ –∫—Ä—ã—Å`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –£–∂–∞—Å, –≤–æ—Ç —Ç–µ–±–µ –∏ –º–∞–≥–∞–∑–∏–Ω..."
        })
    })
}

export async function Portal_Underground(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { location: context.eventPayload.location }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–æ–ª—è–Ω—É —Å–ª–∏–∑–Ω–µ–π`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –¢—Ä–µ—à, –≤–æ—Ç —Ç–µ–±–µ –∏ –º–µ—Ç—Ä–æ..."
        })
    })
}

export async function Portal_Park(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { location: context.eventPayload.location }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ü–æ–≤—Å—é–¥—É –ø—á—ë–ª—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —É–ª–µ–π`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –ñ–µ—Å—Ç—å, –≤–æ—Ç —Ç–µ–±–µ –∏ –ø–∞—Ä–∫..."
        })
    })
}

export async function User_Info(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
    .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
    .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
    if (user && user.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n‚öî–ê—Ç–∞–∫–∞: ${user?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user?.hp}\nüåÄ–ú–∞–Ω–∞: ${user?.mana}\n‚≠ê–û—á–∫–∏: ${user?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –ñ–µ—Å—Ç—å, –≤–æ—Ç —Ç–µ–±–µ –∏ –ø–∞—Ä–∫..."
        })
    })
}
export async function User_Add_Attack(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { atk: { increment: 1 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚öî–ê—Ç–∞–∫–∏ —Å ${user.atk} –¥–æ ${user_add_attack.atk}`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚öî–ê—Ç–∞–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

export async function User_Add_Health(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { hp: { increment: 2 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚ù§–ó–¥–æ—Ä–æ–≤—å—è —Å ${user.hp} –¥–æ ${user_add_attack.hp}`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚ù§–ó–¥–æ—Ä–æ–≤—å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

export async function User_Add_Mana(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –£ —Ç–µ–±—è –¥–∞–∂–µ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç, –∑–∞—á–µ–º —Ç–µ–±–µ –º–∞–Ω–∞? –ü–æ–¥—É–º–∞–π –µ—â—ë`
        })
    })  
    return
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { hp: { increment: 2 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' })
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ üåÄ–ú–∞–Ω—ã —Å ${user.mana} –¥–æ ${user_add_attack.mana}`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ üåÄ–ú–∞–Ω—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

async function User_Generate_Nickname(length: number) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
        counter += 1;
    }
    return result;
}

export async function User_Nickname(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    for (let i=0; i < 4; i++) {
        const name_new = await User_Generate_Nickname(8)
        keyboard.callbackButton({ label: `${name_new}`, payload: { command: 'user_nickname_select', name: `${name_new}` }, color: 'secondary' }).row()
    }
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫:`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: "üîî –ê –∫–∞–∫ –∂–µ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:?"
        })
    })
}

export async function User_Nickname_Select(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', payload: { command: 'battle_init' }, color: 'secondary' })
    keyboard.inline().oneTime() 
    if (user) {
        if (context.eventPayload.name) {
            const user_nickname_save = await prisma.user.update({ where: { id: user.id }, data: { name: context.eventPayload.name } })
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–∏–∫–æ–º: ${user_nickname_save.name}. –ù–æ –≤—ã —Å–ª—ã—à–∏—Ç–µ –∫–∞–∫–æ–π-—Ç–æ —à—É–º`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –í–∞—à –Ω–∏–∫ —Ç–µ–ø–µ—Ä—å: ${user_nickname_save.name}`
                })
            })
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏`
        })
    })
}

async function User_Print(user: any) {
    const bar_current = user.health/user.health_max
    const smile = user.type == "player" ? "üë§" : "ü§ñ"
    let bar = ''
    for (let i = 0; i <= 1; i += 0.1) {
        bar += (i < bar_current) ? 'üü•' : '‚óª'
    }
    return `${smile}: ${bar} [${(bar_current*100).toFixed(2)}%]\n ‚ù§${user.health}/${user.health_max} ‚öî${user.atk} üåÄ${user.mana} [${user.name}]`
}

export async function Battle_Init(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const mob = {
        "–ü–∞—Ä–∫": [{ name: "–°–ª–∏–∑—å", type: "bot", atk: 1, health: 4, health_max: 4, mana: 0}], 
        "–ú–∞–≥–∞–∑–∏–Ω": [{ name: "–ü—á–µ–ª–∞", type: "bot", atk: 2, health: 2, health_max: 2, mana: 0}], 
        "–ú–µ—Ç—Ä–æ": [{ name: "–ú—ã—à—å –ß–µ—Ä–Ω–∞—è", type: "bot", atk: 2, health: 2, health_max: 2, mana: 0},{ name: "–ú—ã—à—å –°–µ—Ä–∞—è", type: "bot", atk: 1, health: 4, health_max: 4, mana: 0}]
    }
    console.log("üöÄ ~ file: contoller.ts:336 ~ Battle_Init ~ mob[user.location]:", mob[user.location])
    const enemy = mob[user.location][randomInt(0, mob[user.location].length)] || mob[user.location]
    const player = { name: `${user?.name}`, type: "player", atk: `${user?.atk}`, health: `${user?.hp}`, health_max: `${user?.hp}`, mana: `${user?.mana}`}
    
    const turn = randomInt(0, 100) > 50 ? true : false
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–ê—Ç–∞–∫–∞', payload: { command: 'user_attack', player, enemy, turn }, color: 'secondary' })
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${turn ? "–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –≤—ã –ø–µ—Ä–≤—ã–º –∑–∞–º–µ—Ç–∏–ª–∏ –≤—Ä–∞–≥–∞" : "–í—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –≤—Ä–∞–≥–∞ –∏ –æ–Ω –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å"}\n${await User_Print(player)}\n${await User_Print(enemy)}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî ${turn ? "–í–∞—à —Ö–æ–¥" : "–í—Ä–∞–≥ –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å"}`
        })
    })
}

export async function User_Attack(context: any) {
    const player = context.eventPayload.player
    const enemy = context.eventPayload.enemy
    const turn = context.eventPayload.turn
    let event = ''
    if (turn) {
        player.health -= enemy.atk
        event += `–í—ã –Ω–∞–Ω–µ—Å–ª–∏  üí•${player.atk}\n`
        enemy.health -= player.atk
        event += `–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å  üí•${enemy.atk}\n`
    } else {
        enemy.health -= player.atk
        event += `–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å  üí•${enemy.atk}\n`
        player.health -= enemy.atk
        event += `–í—ã –Ω–∞–Ω–µ—Å–ª–∏  üí•${player.atk}\n`
    }
    const keyboard = new KeyboardBuilder()
    if (player.health <= 0 || enemy.health <= 0) {
        if (player.health <= 0 ) {
            event += `–í—ã —É–º–µ—Ä–ª–∏ üí•${player.name} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–ª–∞–¥—ã–∫–∞ –¥–µ–º–æ–Ω–æ–≤!\n`
            keyboard.callbackButton({ label: '–í–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è', payload: { command: 'user_revival', player, enemy, turn }, color: 'secondary' })
        }
        if (enemy.health <= 0) {
            event += `–í—ã –æ–¥–µ–∂—Ä–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ üí•${enemy.name}. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n`
            keyboard.callbackButton({ label: '–ü–æ–±–µ–¥–∞ –ù–∞—Ñ–∏–≥', payload: { command: 'user_win', player, enemy, turn }, color: 'secondary' })
        }
    } else {
        keyboard.callbackButton({ label: '–ê—Ç–∞–∫–∞', payload: { command: 'user_attack', player, enemy, turn }, color: 'secondary' })
    }
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event}\n${await User_Print(player)}\n${await User_Print(enemy)}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî ${turn ? "–í–∞—à —Ö–æ–¥" : "–í—Ä–∞–≥ –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å"}`
        })
    })
}

import { KeyboardBuilder } from "vk-io"
import prisma from "./module/prisma_client"
import { root, vk } from "../.."
import { User } from "@prisma/client";
import { randomInt } from "crypto";


function Sleep(ms: number) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

export async function Main_Menu_Init(context: any) {
    //const attached = await Image_Random(context, "bank")
    //const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í–æ–π—Ç–∏ –≤ –ø–æ—Ä—Ç–∞–ª:`, keyboard: await Main_Menu(context)/*, attachment: attached.toString()*/ })
}
export async function Main_Menu(context: any) {
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–ú–∞–≥–∞–∑–∏–Ω', payload: { command: 'portal_shop', location: '–ú–∞–≥–∞–∑–∏–Ω' }, color: 'secondary' })
    .callbackButton({ label: '–ú–µ—Ç—Ä–æ', payload: { command: 'portal_underground', location: '–ú–µ—Ç—Ä–æ' }, color: 'secondary' }).row()
    .callbackButton({ label: '–ü–∞—Ä–∫', payload: { command: 'portal_park', location: '–ü–∞—Ä–∫' }, color: 'secondary' }).inline().oneTime()
    return keyboard
}

export async function Portal_Shop(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { id_region: 7 }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ö–∞–∫ –æ–∫–∞–∑–∞–ª–æ—Å—å, –¥–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –≤–µ–¥—ë—Ç –≤ –≥–Ω–µ–∑–¥–æ –∫—Ä—ã—Å`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Portal_Underground(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { id_region: 13 }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø–æ–ª—è–Ω—É —Å–ª–∏–∑–Ω–µ–π`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function Portal_Park(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user) {
        const user_location = await prisma.user.update({ where: { id: user.id }, data: { id_region: 1 }})
    }
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–î–∞–ª–µ–µ', payload: { command: 'user_info' }, color: 'secondary' })
    .callbackButton({ label: '–ù–∞–∑–∞–¥', payload: { command: 'system_call' }, color: 'secondary' }).inline().oneTime()
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ü–æ–≤—Å—é–¥—É –ø—á—ë–ª—ã, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —É–ª–µ–π`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function User_Info(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
    .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
    .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
    if (user && user.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n‚öî–ê—Ç–∞–∫–∞: ${user?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user?.hp}\nüåÄ–ú–∞–Ω–∞: ${user?.mana}\n‚≠ê–û—á–∫–∏: ${user?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
export async function User_Add_Attack(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { atk: { increment: 1 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚öî–ê—Ç–∞–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

export async function User_Add_Health(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { hp: { increment: 2 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' }).row()
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚ù§–ó–¥–æ—Ä–æ–≤—å—è —Å ${user.hp} –¥–æ ${user_add_attack.hp}`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚ù§–ó–¥–æ—Ä–æ–≤—å—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

export async function User_Add_Mana(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null | undefined = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –£ —Ç–µ–±—è –¥–∞–∂–µ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç, –∑–∞—á–µ–º —Ç–µ–±–µ –º–∞–Ω–∞? –ü–æ–¥—É–º–∞–π –µ—â—ë`
        })
    })  
    return
    if (user && user.point > 0) {
        const user_add_attack = await prisma.user.update({ where: { id: user.id }, data: { hp: { increment: 2 }, point: { decrement: 1 } } })
        if (user_add_attack) {
            const keyboard = new KeyboardBuilder()
            .callbackButton({ label: '+‚öî-‚≠ê', payload: { command: 'user_add_attack' }, color: 'secondary' })
            .callbackButton({ label: '+‚ù§-‚≠ê', payload: { command: 'user_add_health' }, color: 'secondary' })
            .callbackButton({ label: '+üåÄ-‚≠ê', payload: { command: 'user_add_mana' }, color: 'secondary' })
            if (user_add_attack.point <= 0) { keyboard.callbackButton({ label: '–î–∞–ª—å—à–µ', payload: { command: 'user_nickname' }, color: 'secondary' })}
            keyboard.inline().oneTime()
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `‚öî–ê—Ç–∞–∫–∞: ${user_add_attack?.atk}\n‚ù§–ó–¥–æ—Ä–æ–≤—å–µ: ${user_add_attack?.hp}\nüåÄ–ú–∞–Ω–∞: ${user_add_attack?.mana}\n‚≠ê–û—á–∫–∏: ${user_add_attack?.point}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            await vk.api.messages.sendMessageEventAnswer({
                event_id: context.eventId,
                user_id: context.userId,
                peer_id: context.peerId,
                event_data: JSON.stringify({
                    type: "show_snackbar",
                    text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ üåÄ–ú–∞–Ω—ã —Å ${user.mana} –¥–æ ${user_add_attack.mana}`
                })
            })    
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –ü–æ–≤—ã—à–µ–Ω–∏–µ üåÄ–ú–∞–Ω—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ`
        })
    })  
}

async function User_Generate_Nickname(length: number) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    let counter = 0;
    while (counter < length) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
        counter += 1;
    }
    return result;
}

export async function User_Nickname(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    for (let i=0; i < 4; i++) {
        const name_new = await User_Generate_Nickname(8)
        keyboard.callbackButton({ label: `${name_new}`, payload: { command: 'user_nickname_select', name: `${name_new}` }, color: 'secondary' }).row()
    }
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫:`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function User_Nickname_Select(context: any) {
    //const attached = await Image_Random(context, "bank")
    const user: User | null = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', payload: { command: 'battle_init' }, color: 'secondary' })
    keyboard.inline().oneTime() 
    if (user) {
        if (context.eventPayload.name) {
            const user_nickname_save = await prisma.user.update({ where: { id: user.id }, data: { name: context.eventPayload.name } })
            await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–∏–∫–æ–º: ${user_nickname_save.name}. –ù–æ –≤—ã —Å–ª—ã—à–∏—Ç–µ –∫–∞–∫–æ–π-—Ç–æ —à—É–º`, keyboard: keyboard/*, attachment: attached.toString()*/ })
            return
        }
    }
    await vk.api.messages.sendMessageEventAnswer({
        event_id: context.eventId,
        user_id: context.userId,
        peer_id: context.peerId,
        event_data: JSON.stringify({
            type: "show_snackbar",
            text: `üîî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à–æ–∫–æ–ª–∞–¥–∫–∏`
        })
    })
}

async function User_Print(user: any) {
    const bar_current = user.health/user.health_max
    const smile = user.type == "player" ? "üë§" : "ü§ñ"
    let bar = ''
    for (let i = 0; i <= 1; i += 0.1) {
        bar += (i < bar_current) ? 'üü•' : '‚óª'
    }
    return `\n${smile}: ${bar} [${(bar_current*100).toFixed(2)}%]\n ‚ù§${user.health}/${user.health_max} ‚öî${user.atk} üåÄ${user.mana} [${user.name}]\n`
}

async function Counter_Enemy(queue_battle: any) {
    //—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–∞–≥–æ–≤ –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤
    const counter: any = { enemy: 0, friend: 0}
    const helper = ['enemy', 'friend']
    for (let i in helper) {
        for (let j in queue_battle) {
            if (queue_battle[j].team == helper[i] && queue_battle[j].health > 0) {
                counter[helper[i]] = counter[helper[i]]+1
            }
        }
    }
    return counter
}
    
async function Use_Effect(id: any, effect_list: any) {
    //–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–∫–∏–ª–ª–æ–≤ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—â–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
    const config: any = {
        '–î–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è': Effect_Disorientation
    }
    try {
        const res = config[effect_list[id].effect](id)
        return res
    } catch (e) {
        return e 
    }
}
async function Effect_Disorientation(id: any, effect_list: any, queue_battle: any) {
    //id —ç—Ç–æ –Ω–æ–º–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ü–µ–ª—å —ç—Ñ—Ñ–µ–∫—Ç –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤–µ—Ä–Ω–∏—Ç–µ –≤ status –∑–Ω–∞—á–µ–Ω–∏–µ False —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞, –≤ –∑–Ω–∞—á–µ–Ω–∏–µ message –≥–µ–Ω–µ–Ω—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    let res = ''
    let status = true
    if (effect_list[id]?.time > 0) {
        res = `–ù–∞ ${queue_battle[effect_list[id].target.name]} –ø—Ä–∏–º–µ–Ω–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç: ${effect_list[id].effect}\n`
        //–±–ª–∞–≥–æ–¥–∞—Ä—è —Ñ–æ—Ä–º—É–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ–±—ã –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—ã–ª–∞ –Ω–µ –±–æ–ª—å—à–µ 1 —Ö–æ–¥–∞) –∏–Ω–∞—á–µ –ø—Ä–∏–¥–µ—Ç—Å—è —É—Å–ª–æ–∂–Ω—è—Ç—å –∞–¥–ª–ª–≥–æ—Ä–∏—Ç–º
        queue_battle[effect_list[id].target.atk]*=0.9
        res += `–£—Ä–æ–Ω –ø–æ–Ω–∏–∂–µ–Ω –Ω–∞ 10%, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ ${queue_battle[effect_list[id].target.atk]}\n`
        if (randomInt(1,100) < 50) {
            status = false
            res += ' –û–≥–ª—É—à–µ–Ω–∏–µ! –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞\n'
            effect_list[id].time-=1
        }
    } else {
        queue_battle[effect_list[id].target.atk] = queue_battle[effect_list[id].target.atk] * 100/90
        res += `–î–µ–∑–æ—Ä–∏–Ω—Ç–∞—Ü–∏—è –æ–∫–æ–Ω—á–∏–ª–∞ —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–µ–±–∞—Ñ —Å–Ω—è—Ç c ${queue_battle[effect_list[id].target.name]}, —Ç–µ–ø–µ—Ä—å –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Å–Ω–æ–≤–∞ ${queue_battle[effect_list[id].target.atk]}\n`
        effect_list.pop(id)
    }
    const answer = {
        'message': res,
        'status': status
    }
    return answer       
}

async function Target(queue_battle: any, type: any) {
    //—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–∞–≥–æ–≤ –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤
    const detected: any = { enemy: [], friend: []}
    const helper = ['enemy', 'friend']
    for (const i in helper) {
        for (const j in queue_battle) {
            if (queue_battle[j].team == helper[i] && queue_battle[j].health > 0) {
                detected[helper[i]].push(j)
            }
        }
    } 
    return detected[type][randomInt(0, detected[type].length)]
}
async function Use_Skill(skill: any, target: any, current: any, queue_battle: any, effect_list: any) {
    //–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∫–∏–ª–ª–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∫–∏–ª–ª–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∏–ª–ª–∞
    const config: any = {
        '–ê–ø–ø–µ—Ä–∫–æ—Ç': Skill_Uppercut
    }
    try {
        const res = config[skill](target, current, queue_battle, effect_list)
        return res
    } catch (e) {
        return e
    }
}
async function Skill_Uppercut(target: any, current: any, queue_battle: any, effect_list: any) {
    queue_battle[target].health -= queue_battle[current].atk
    let res = `${queue_battle[current].name} –Ω–∞–Ω–µ—Å —É—Ä–æ–Ω–∞: ${queue_battle[current].atk} –ø–æ ${queue_battle[target].name} —É —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: ${queue_battle[target].health}`
    if (randomInt(1,100) < 50) {
        effect_list.push({'target': target, 'effect': '–î–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è', 'time': 1})
        res += ' –Ω–∞–ª–æ–∂–µ–Ω–∞ –î–µ–∑–æ—Ä–∏–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª—å!\n'
    }
    return res
}
        
        
export async function Battle_Init(context: any) {
    //–°—Ç–∞–¥–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫ –±–∏—Ç–≤–µ
    const user: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const creature: any = {
        "–ü–∞—Ä–∫": [{ name: "–°–ª–∏–∑—å", type: "bot", team: 'enemy', atk: 1, health: 4, health_max: 4, mana: 0, skill: ['–ê–ø–ø–µ—Ä–∫–æ—Ç', '–ê—Ç–∞–∫–∞'] }], 
        "–ú–∞–≥–∞–∑–∏–Ω": [{ name: "–ü—á–µ–ª–∞", type: "bot", team: 'enemy', atk: 2, health: 2, health_max: 2, mana: 0, skill: ['–ê–ø–ø–µ—Ä–∫–æ—Ç', '–ê—Ç–∞–∫–∞'] }], 
        "–ú–µ—Ç—Ä–æ": [
            { name: "–ú—ã—à—å –ß–µ—Ä–Ω–∞—è", type: "bot", team: 'enemy', atk: 2, health: 2, health_max: 2, mana: 0, skill: ['–ê–ø–ø–µ—Ä–∫–æ—Ç', '–ê—Ç–∞–∫–∞'] },
            { name: "–ú—ã—à—å –°–µ—Ä–∞—è", type: "bot", team: 'enemy', atk: 1, health: 4, health_max: 4, mana: 0, skill: ['–ê–ø–ø–µ—Ä–∫–æ—Ç', '–ê—Ç–∞–∫–∞'] }
        ],
        "–ò–≥—Ä–æ–∫": [{ name: `${user?.name}`, type: "player", 'team': 'friend', atk: `${user?.atk}`, health: `${user?.hp}`, health_max: `${user?.hp}`, mana: `${user?.mana}`, skill: ['–ê–ø–ø–µ—Ä–∫–æ—Ç', '–ê—Ç–∞–∫–∞'] }]
    }
    const queue_battle: any = []
    const effect_list: any = []
    //–°—Ç–∞–¥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–±–æ–≤ –∏ –∏–≥—Ä–æ–∫–∞
    const region: any = await prisma.region.findFirst({where: { uid: user.id_region }, include: { location: true}})
    queue_battle.push(creature["–ò–≥—Ä–æ–∫"][randomInt(0, creature["–ò–≥—Ä–æ–∫"].length)])
    if (region.mob_min == region.mob_max) {
        for (let i=0; i < region.mob_min; i++) {
            queue_battle.push(creature[region.location.name][randomInt(0, creature[region.location.name].length)])
        }
    } else {
        const limiter = randomInt(region.mob_min, region.mob_max)
        for (let i=0; i < limiter; i++) {
            queue_battle.push(creature[region.location.name][randomInt(0, creature[region.location.name].length)])
        }
    }
    //c—Ç–∞—Ç—É—Å –±–∞—Ä—ã
    let event_logger = '' 
    for (let i in queue_battle) {
        event_logger += await User_Print(queue_battle[i])
    }
    const battle_init = await prisma.battle.upsert({ create: { id_user: user.id, queue_battle: JSON.stringify(queue_battle), effect_list: JSON.stringify(effect_list) }, update: { queue_battle: JSON.stringify(queue_battle), effect_list: JSON.stringify(effect_list) }, where: { id_user: user?.id }})
    
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–ê—Ç–∞–∫–∞', payload: { command: 'user_attack', id_battle: battle_init.id_user }, color: 'secondary' })
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${queue_battle[0].type == 'player' ? "–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –≤—ã –ø–µ—Ä–≤—ã–º –∑–∞–º–µ—Ç–∏–ª–∏ –≤—Ä–∞–≥–∞" : "–í—ã –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏ –≤—Ä–∞–≥–∞ –∏ –æ–Ω –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å"}\n${event_logger}`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}
export async function User_Attack(context: any) {
    const id_battle = context.eventPayload.id_battle
    const battle_data: any = await prisma.battle.findFirst({ where: { id: id_battle } })
    const queue_battle = JSON.parse(battle_data.queue_battle)
    const effect_list = JSON.parse(battle_data.effect_list)
    //let current = context.eventPayload.current
    const alive_counter: any = await Counter_Enemy(queue_battle)
    console.log("–ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è:", alive_counter)
    let event_logger = '' 
    const keyboard = new KeyboardBuilder()
    for (const cur in queue_battle) {
        const current = cur
        if (alive_counter.friend > 0 && alive_counter.enemy > 0) {
            console.log('battle')
            /*for (const i in effect_list) {
                if (effect_list[i]?.target == current) {
                    const effect_sel = await Use_Effect(i, effect_list)
                    if (effect_sel?.status == false) {
                        /*if (current+2 > (alive_counter.friend + alive_counter.enemy)) {
                            current = 0
                        }
                        else {
                            current+=1
                        }
                    }
                    event_logger += effect_sel?.message
                }
            }*/
            console.log('effect actived')
            if (queue_battle[current].team == 'enemy' && queue_battle[current].health > 0) {
                //–µ—Å–ª–∏ —Ö–æ–¥–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä
                console.log('enemy turn')
                const target = await Target(queue_battle, 'friend')
                console.log("üöÄ ~ file: contoller.ts:398 ~ User_Attack ~ target:", target)
                const skill_sel = queue_battle[current].skill
                console.log("üöÄ ~ file: contoller.ts:400 ~ User_Attack ~ skill_sel:", skill_sel)
                event_logger += `–£–∑—Ä–∏ –≤—Å—é –º–æ—â—å: ${skill_sel[0]}`
                const skill_status = await Use_Skill(skill_sel[0], Number(target), current, queue_battle, effect_list)
                event_logger += skill_status
            }
            console.log('enemy end turn')
            if (queue_battle[current].team == 'friend' && queue_battle[current].health > 0) {
                //–µ—Å–ª–∏ —Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫
                console.log('player turn')
                const skill_sel = queue_battle[current].skill
                const target = await Target(queue_battle, 'enemy')
                event_logger += `–í—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${skill_sel[0]}`
                const skill_status = await Use_Skill(skill_sel[0], target, current, queue_battle, effect_list)
                event_logger += skill_status
            }
            /*if (current+1 < (alive_counter.friend + alive_counter.enemy)) {
                current+=1
            } else {
                current = 0
            }*/
        }
        const battle_init = await prisma.battle.upsert({ create: { id_user: battle_data.id, queue_battle: JSON.stringify(queue_battle), effect_list: JSON.stringify(effect_list) }, update: { queue_battle: JSON.stringify(queue_battle), effect_list: JSON.stringify(effect_list) }, where: { id_user: battle_data?.id }})
    } 
    const alive_counter_end: any = await Counter_Enemy(queue_battle)
    if (alive_counter_end.friend <= 0 || alive_counter_end.enemy <= 0) {
        if (alive_counter_end.friend > 0) {
            const user: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
            const region: any = await prisma.region.findFirst({where: { uid: user.id_region }})
            const region_next: any = []
            const region_current = JSON.parse(region.road)
            for (const i in region_current) {
                const region_temp = await prisma.region.findFirst({ where: { uid: region_current[i].uid } })
                region_next.push(region_temp)
            }
            event_logger += `–ö—É–¥–∞ –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ:\n`
            for (const i in region_next) {
                event_logger += `${region_next[i].label} - ${region_next[i].name}\n`
                keyboard.callbackButton({ label: region_next[i].label, payload: { command: 'user_win', uid: region_next[i].uid }, color: 'secondary' }).row()
            }
            event_logger += `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π, –Ω–æ –≤–ø–µ—Ä–µ–¥–∏ —Ä–∞–∑–≤–∏–ª–∫–∞, –∫—É–¥–∞ –ø–æ–π–¥–µ–º?`
        } else {
            keyboard.callbackButton({ label: '–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ', payload: { command: 'battle_init' }, color: 'secondary' })
            event_logger += `–í—ã –º–µ—Ä—Ç–≤—ã, –í–ª–∞–¥—ã–∫–∞ –¥–µ–º–æ–Ω–æ–≤ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`
        }
    } else {
        keyboard.callbackButton({ label: '–ê—Ç–∞–∫–∞', payload: { command: 'user_attack', id_battle: id_battle }, color: 'secondary' })
    }
    
    /*if (turn) {–í—ã –¥–æ–≤–æ–ª—å–Ω—ã–π –ø–æ–±–µ–¥–æ–π –ø—Ä–æ—à–ª–∏ –¥–∞–ª—å—à–µ, –Ω–æ –∑–¥–µ—Å—å –¥–∞–ª—å—à–µ 
        player.health -= enemy.atk
        event += `–í—ã –Ω–∞–Ω–µ—Å–ª–∏  üí•${player.atk}\n`
        enemy.health -= player.atk
        event += `–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å  üí•${enemy.atk}\n`
    } else {
        enemy.health -= player.atk
        event += `–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å  üí•${enemy.atk}\n`
        player.health -= enemy.atk
        event += `–í—ã –Ω–∞–Ω–µ—Å–ª–∏  üí•${player.atk}\n`
    }*/
    
    
    /*if (player.health <= 0 || enemy.health <= 0) {
        if (player.health <= 0 ) {
            event += `–í—ã —É–º–µ—Ä–ª–∏ üí•${player.name} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –≤–ª–∞–¥—ã–∫–∞ –¥–µ–º–æ–Ω–æ–≤!\n`
            keyboard.callbackButton({ label: '–í–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è', payload: { command: 'user_revival', player, enemy, turn }, color: 'secondary' })
        }
        if (enemy.health <= 0) {
            event += `–í—ã –æ–¥–µ–∂—Ä–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ üí•${enemy.name}. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n`
            keyboard.callbackButton({ label: '–ü–æ–±–µ–¥–∞ –ù–∞—Ñ–∏–≥', payload: { command: 'user_win', player, enemy, turn }, color: 'secondary' })
        }
    } else {
        keyboard.callbackButton({ label: '–ê—Ç–∞–∫–∞', payload: { command: 'user_attack', player, enemy, turn }, color: 'secondary' })
    }*/
    for (let i in queue_battle) {
        if (queue_battle[i].health > 0)
        event_logger += await User_Print(queue_battle[i])
    }
    const user: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const region: any = await prisma.region.findFirst({where: { uid: user.id_region }, include: { location: true}})

    event_logger += `üåê:${region.location.name}-${region.name}\n`
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}

export async function User_Win(context: any) {
    const user: any = await prisma.user.findFirst({ where: { idvk: context.peerId } })
    const uid = context.eventPayload.uid
    const user_location = await prisma.user.update({ where: { id: user.id }, data: { id_region: uid }})
    let event_logger = '–û–ø–∞ —á–∏—Ä–∏–∫, –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –∏ –º–æ–±—ã –Ω–∞—Ñ–∏–≥!' 
    
    const keyboard = new KeyboardBuilder()
    .callbackButton({ label: '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è', payload: { command: 'battle_init' }, color: 'secondary' })
    keyboard.inline().oneTime()        
    await vk.api.messages.edit({peer_id: context.peerId, conversation_message_id: context.conversationMessageId, message: `${event_logger}\n`, keyboard: keyboard/*, attachment: attached.toString()*/ })
}